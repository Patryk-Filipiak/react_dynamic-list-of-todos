{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","types/Option.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","list","handleTask","activeTodo","className","map","todo","id","completed","title","type","onClick","TodoFilter","query","option","handleQuery","handleOption","value","onChange","e","target","placeholder","trim","length","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Option","TodoModal","handleClose","useState","user","setUser","useEffect","userId","catch","console","error","href","email","name","App","setList","isLoading","setIsLoading","All","setOption","setQuery","task","setTask","finally","filteredTodos","useMemo","filter","search","RegExp","Active","Completed","ReactDOM","render","document","getElementById"],"mappings":"mOASaA,EAA4B,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,WAAYC,EAArB,EAAqBA,WAArB,OACvC,wBAAOC,UAAU,+BAAjB,UACE,gCACE,+BACE,mCACA,6BACE,sBAAMA,UAAU,OAAhB,SACE,mBAAGA,UAAU,qBAGjB,uCACA,wCAIJ,gCACGH,EAAKI,KAAI,SAACC,GAAD,OACR,qBAAI,UAAQ,OAAOF,UAAU,GAA7B,UACE,oBAAIA,UAAU,eAAd,SAA8BE,EAAKC,KAClCD,EAAKE,UAEF,oBAAIJ,UAAU,eAAd,SACE,sBAAMA,UAAU,OAAO,UAAQ,gBAA/B,SACE,mBAAGA,UAAU,qBAIjB,oBAAIA,UAAU,iBAClB,oBAAIA,UAAU,2BAAd,SACE,mBAAGA,UAAS,mBAAcE,EAAKE,UAAY,UAAY,UAAvD,SAAoEF,EAAKG,UAE3E,oBAAIL,UAAU,8BAAd,SACE,wBACE,UAAQ,eACRA,UAAU,SACVM,KAAK,SACLC,QAAS,kBAAMT,EAAWI,IAJ5B,SAME,sBAAMF,UAAU,OAAhB,SACE,mBAAGA,UAAS,oBAAgBD,IAAeG,EAAO,SAAW,cAtBhCA,EAAKC,aCnBrCK,EAA6B,SAAC,GAAD,IACxCC,EADwC,EACxCA,MACAC,EAFwC,EAExCA,OACAC,EAHwC,EAGxCA,YACAC,EAJwC,EAIxCA,aAJwC,OAMxC,uBAAMZ,UAAU,mBAAhB,UACE,mBAAGA,UAAU,UAAb,SACE,sBAAMA,UAAU,SAAhB,SACE,yBACE,UAAQ,eACRa,MAAOH,EACPI,SAAU,SAAAC,GAAC,OAAIH,EAAaG,EAAEC,OAAOH,QAHvC,UAKE,wBAAQA,MAAM,MAAd,iBACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,YAAd,8BAKN,oBAAGb,UAAU,qDAAb,UACE,uBACE,UAAQ,cACRM,KAAK,OACLN,UAAU,QACViB,YAAY,YACZJ,MAAOJ,EACPK,SAAU,SAAAC,GAAC,OAAIJ,EAAYI,EAAEC,OAAOH,UAEtC,sBAAMb,UAAU,eAAhB,SACE,mBAAGA,UAAU,8BAEdS,EAAMS,OAAOC,OAAS,GACrB,mCACE,sBAAMnB,UAAU,gBAAgBoB,MAAO,CAAEC,cAAe,OAAxD,SACE,wBACE,aAAW,eACX,UAAQ,oBACRf,KAAK,SACLN,UAAU,SACVO,QAAS,kBAAMI,EAAY,kBC7C5BW,G,MAAmB,kBAC9B,qBAAKtB,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,wBCSnB,SAASuB,EAAOC,GAEd,IARYC,EAQNC,EAZS,iEAYYF,EAAM,QAGjC,OAXYC,EAWA,IAVL,IAAIE,SAAQ,SAAAC,GACjBC,WAAWD,EAASH,OAUnBK,MAAK,kBAAMC,MAAML,MACjBI,MAAK,SAAAE,GAAG,OAAIA,EAAIC,UAGd,ICxBKC,ECWCC,EAAsC,SAAC,GAA2B,IAAzBjC,EAAwB,EAAxBA,KAAMkC,EAAkB,EAAlBA,YAC1D,EAAwBC,mBAAsB,MAA9C,mBAAOC,EAAP,KAAaC,EAAb,KAQA,OANAC,qBAAU,WFYW,IAACC,KEXZvC,EAAKuC,OFW0BlB,EAAG,iBAAiBkB,KEXtCX,KAAKS,GAEvBG,OAAM,kBAAMC,QAAQC,MAAM,6BAC5B,IAGD,sBAAK5C,UAAU,kBAAkB,UAAQ,QAAzC,UACE,qBAAKA,UAAU,qBAEbsC,EAGA,sBAAKtC,UAAU,aAAf,UACE,yBAAQA,UAAU,kBAAlB,UACE,sBACEA,UAAU,0CACV,UAAQ,eAFV,mBAKGE,EAAKC,MAIR,wBACEG,KAAK,SACLN,UAAU,SACV,UAAQ,cACRO,QAAS6B,OAIb,sBAAKpC,UAAU,kBAAf,UACE,mBAAGA,UAAU,QAAQ,UAAQ,cAA7B,SACGE,EAAKG,QAGR,oBAAGL,UAAU,QAAQ,UAAQ,aAA7B,UAEE,wBAAQA,UAAS,mBAAcE,EAAKE,UAAY,UAAY,UAA5D,SACGF,EAAKE,UAAY,OAAS,YAG5B,OAED,mBAAGyC,KAAI,iBAAYP,EAAKQ,OAAxB,SACGR,EAAKS,gBAnCd,cAAC,EAAD,S,SDzBIb,K,UAAAA,E,gBAAAA,E,uBAAAA,M,KEaL,IAAMc,EAAgB,WAC3B,MAAwBX,mBAAiB,IAAzC,mBAAOxC,EAAP,KAAaoD,EAAb,KACA,EAAkCZ,oBAAkB,GAApD,mBAAOa,EAAP,KAAkBC,EAAlB,KACA,EAA4Bd,mBAAiBH,EAAOkB,KAApD,mBAAO1C,EAAP,KAAe2C,EAAf,KACA,EAA0BhB,mBAAiB,IAA3C,mBAAO5B,EAAP,KAAc6C,EAAd,KACA,EAAwBjB,mBAAsB,MAA9C,mBAAOkB,EAAP,KAAaC,EAAb,KAEAhB,qBAAU,WHIkBjB,EAAY,UGFnCO,KAAKmB,GAELP,OAAM,SAACE,GAAD,OAAWD,QAAQC,MAAM,yBAA0BA,MACzDa,SAAQ,kBAAMN,GAAa,QAC7B,IAEH,IAAMO,EAAgBC,mBAAQ,kBAAM9D,EAAK+D,QAAO,SAAC1D,GAAD,OAAeA,EAAKG,MAAMwD,OAAO,IAAIC,OAAOrD,EAAMS,OAAQ,OAAS,KAChH0C,QAAO,SAAC1D,GAAD,OAAgBQ,IAAWwB,EAAOkB,KACtC1C,IAAWwB,EAAO6B,SAAW7D,EAAKE,WAClCM,IAAWwB,EAAO8B,WAAa9D,EAAKE,eAAc,CAACK,EAAOC,EAAQb,IAExE,OACE,qCACE,qBAAKG,UAAU,UAAf,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,oBAEA,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,CACEW,YAAa,SAACE,GAAD,OAAkByC,EAASzC,IACxCD,aAAc,SAACC,GAAD,OAAkBwC,EAAUxC,IAC1CJ,MAAOA,EACPC,OAAQA,MAIZ,qBAAKV,UAAU,QAAf,SACGkD,EACG,cAAC,EAAD,IAEA,cAAC,EAAD,CACErD,KAAM6D,EACN3D,WAAYwD,EACZzD,WAAY,SAACI,GAAD,OAAesD,EAAQtD,eAQhDqD,GAAQ,cAAC,EAAD,CAAWrD,KAAMqD,EAAMnB,YAAa,kBAAMoB,EAAQ,aC7DjES,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.d0c7b15d.chunk.js","sourcesContent":["import React from 'react';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  list: Todo[];\n  activeTodo: Todo | null;\n  handleTask: (todo:Todo) => void;\n};\n\nexport const TodoList: React.FC<Props> = ({ list, handleTask, activeTodo }) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {list.map((todo:Todo) => (\n        <tr data-cy=\"todo\" className=\"\" key={todo.id}>\n          <td className=\"is-vcentered\">{todo.id}</td>\n          {todo.completed\n            ? (\n              <td className=\"is-vcentered\">\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </td>\n            )\n            : <td className=\"is-vcentered\" />}\n          <td className=\"is-vcentered is-expanded\">\n            <p className={`has-text-${todo.completed ? 'success' : 'danger'}`}>{todo.title}</p>\n          </td>\n          <td className=\"has-text-right is-vcentered\">\n            <button\n              data-cy=\"selectButton\"\n              className=\"button\"\n              type=\"button\"\n              onClick={() => handleTask(todo)}\n            >\n              <span className=\"icon\">\n                <i className={`far fa-eye${(activeTodo === todo ? '-slash' : '')}`} />\n              </span>\n            </button>\n          </td>\n        </tr>\n      ))}\n    </tbody>\n  </table>\n);\n","type Props = {\n  query: string;\n  option: string;\n  handleOption: (option:string) => void;\n  handleQuery: (value:string) => void;\n};\n\nexport const TodoFilter:React.FC<Props> = ({\n  query,\n  option,\n  handleQuery,\n  handleOption,\n}) => (\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          data-cy=\"statusSelect\"\n          value={option}\n          onChange={e => handleOption(e.target.value)}\n        >\n          <option value=\"all\">All</option>\n          <option value=\"active\">Active</option>\n          <option value=\"completed\">Completed</option>\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        data-cy=\"searchInput\"\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search...\"\n        value={query}\n        onChange={e => handleQuery(e.target.value)}\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n      {query.trim().length > 0 && (\n        <>\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            <button\n              aria-label=\"clear search\"\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => handleQuery('')}\n            />\n          </span>\n        </>\n      )}\n    </p>\n  </form>\n);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","export enum Option {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { Todo } from '../../types/Todo';\n\ntype TodoModalProps = {\n  todo: Todo;\n  handleClose: ()=>void;\n};\n\nexport const TodoModal: React.FC<TodoModalProps> = ({ todo, handleClose }) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    getUser(todo.userId).then(setUser)\n      // eslint-disable-next-line no-console\n      .catch(() => console.error('Unable to load user.'));\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              Todo #\n              {todo.id}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={handleClose}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {todo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {/* <strong className=\"has-text-success\">Done</strong> */}\n              <strong className={`has-text-${todo.completed ? 'success' : 'danger'}`}>\n                {todo.completed ? 'Done' : 'Planned'}\n              </strong>\n\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useMemo, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { Option } from './types/Option';\n\nexport const App: React.FC = () => {\n  const [list, setList] = useState<Todo[]>([]);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [option, setOption] = useState<Option>(Option.All);\n  const [query, setQuery] = useState<string>('');\n  const [task, setTask] = useState<Todo | null>(null);\n\n  useEffect(() => {\n    getTodos()\n      .then(setList)\n      // eslint-disable-next-line no-console\n      .catch((error) => console.error('Error in loading todos', error))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  const filteredTodos = useMemo(() => list.filter((todo:Todo) => todo.title.search(new RegExp(query.trim(), 'i')) > -1)\n    .filter((todo:Todo) => (option === Option.All\n    || (option === Option.Active && !todo.completed)\n    || (option === Option.Completed && todo.completed))), [query, option, list]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                handleQuery={(value:string) => setQuery(value)}\n                handleOption={(value:string) => setOption(value as Option)}\n                query={query}\n                option={option}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading\n                ? <Loader />\n                : (\n                  <TodoList\n                    list={filteredTodos}\n                    activeTodo={task}\n                    handleTask={(todo:Todo) => setTask(todo)}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {task && <TodoModal todo={task} handleClose={() => setTask(null)} />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}